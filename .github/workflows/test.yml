on:
  push:
    paths-ignore:
      - temp/*/**      
 
jobs:  
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3        
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test -- --reporters=jest-junit --coverage --coverageReporters=cobertura      
      - name: Upload test results
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: '**/junit.xml'    # Path to test results
          reporter: jest-junit  
          
      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.9
        with:
          reports: '**/cobertura-coverage.xml'
          targetdir: 'coveragereport'
          
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: CoverageReport # Artifact name        
          path: coveragereport
          
      - name: "Set Env Variables for Codacy"
        shell: bash
        run: |
          echo "CODACY_ORGANIZATION_PROVIDER=$(if [[ $GITHUB_SERVER_URL == "https://github.com" ]]; then echo "gh"; else echo "ghe"; fi)" >> $GITHUB_ENV
          echo "CODACY_USERNAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "CODACY_PROJECT_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          
      - name: Upload Coverage to Codacy
        shell: bash
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report $(find . -name 'cobertura-coverage.xml' -printf '-r %p ')
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
